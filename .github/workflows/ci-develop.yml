# 开发分支持续集成工作流
name: CI for Develop Branch

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

# 配置工作流权限
permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write
  actions: read
  security-events: write

env:
  MAVEN_OPTS: "-Xmx2048m"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完整历史记录用于 SonarQube 分析

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Validate Maven project
        run: mvn ${{ env.MAVEN_CLI_OPTS }} validate -Drevision=${{ steps.extract_version.outputs.version }}

      - name: Compile project
        run: mvn ${{ env.MAVEN_CLI_OPTS }} clean compile -Drevision=${{ steps.extract_version.outputs.version }}

      - name: Run Checkstyle
        run: mvn ${{ env.MAVEN_CLI_OPTS }} checkstyle:check -Drevision=${{ steps.extract_version.outputs.version }}
        continue-on-error: true

      - name: Run SpotBugs
        run: mvn ${{ env.MAVEN_CLI_OPTS }} spotbugs:check -Drevision=${{ steps.extract_version.outputs.version }}
        continue-on-error: true

  # 测试任务
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 30

    strategy:
      matrix:
        java-version: [ 21 ]

    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run unit tests
        run: mvn ${{ env.MAVEN_CLI_OPTS }} test -Drevision=${{ steps.extract_version.outputs.version }}

      - name: Check for test reports
        id: check_reports
        run: |
          if find . -name "*.xml" -path "*/target/surefire-reports/*" -type f 2>/dev/null | grep -q .; then
            echo "reports_exist=true" >> $GITHUB_OUTPUT
            echo "Test reports found"
          else
            echo "reports_exist=false" >> $GITHUB_OUTPUT
            echo "No test reports found"
          fi

      - name: Generate test report
        uses: dorny/test-reporter@v1.9.1
        if: (success() || failure()) && steps.check_reports.outputs.reports_exist == 'true'
        with:
          name: Maven Tests (JDK ${{ matrix.java-version }})
          path: '**/target/surefire-reports/*.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Generate coverage report
        run: mvn ${{ env.MAVEN_CLI_OPTS }} jacoco:report -Drevision=${{ steps.extract_version.outputs.version }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success() && matrix.java-version == '21'
        with:
          file: ./target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # 安全扫描任务
  security-scan:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run OWASP Dependency Check
        run: mvn ${{ env.MAVEN_CLI_OPTS }} org.owasp:dependency-check-maven:check -Drevision=${{ steps.extract_version.outputs.version }}
        continue-on-error: true

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-report
          path: '**/target/dependency-check-report.html'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build for CodeQL
        run: mvn ${{ env.MAVEN_CLI_OPTS }} clean compile -Drevision=${{ steps.extract_version.outputs.version }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 构建和打包
  build:
    runs-on: ubuntu-latest
    needs: [ test, security-scan ]
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build project
        run: mvn ${{ env.MAVEN_CLI_OPTS }} clean package -DskipTests -Drevision=${{ steps.extract_version.outputs.version }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/target/*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar
          retention-days: 7

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run performance tests
        run: mvn ${{ env.MAVEN_CLI_OPTS }} test -Dtest=**/*PerformanceTest -Drevision=${{ steps.extract_version.outputs.version }}
        continue-on-error: true

  # 通知任务
  notify:
    runs-on: ubuntu-latest
    needs: [ code-quality, test, security-scan, build, performance-test ]
    if: always()

    steps:
      - name: Check workflow status
        id: status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Create workflow summary
        run: |
          echo "## 🚀 CI 工作流执行摘要" >> $GITHUB_STEP_SUMMARY
          echo "| 任务 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 代码质量检查 | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 单元测试 | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 安全扫描 | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 构建打包 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 性能测试 | ${{ needs.performance-test.result }} |" >> $GITHUB_STEP_SUMMARY
