# 开发分支持续集成工作流
# 当向 develop 分支推送代码或创建针对 develop 分支的 PR 时触发
name: CI for Develop Branch

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  # 测试任务：运行单元测试、集成测试和代码覆盖率检查
  test:
    runs-on: ubuntu-latest

    steps:
      # 检出代码到工作目录
      - name: Checkout code
        uses: actions/checkout@v4

      # 配置 JDK 21 环境并启用 Maven 缓存以加速构建
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 从 pom.xml 中提取项目版本号，并将其输出供后续步骤使用
      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      # 执行 Maven 清理并运行所有测试，使用提取的版本号作为参数
      - name: Run tests
        run: mvn clean test -Drevision=${{ steps.extract_version.outputs.version }}

      # 生成并上传 JUnit 格式的测试报告（无论成功或失败都执行）
      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: '**/target/surefire-reports/*.xml'
          reporter: java-junit

      # 生成 JaCoCo 代码覆盖率报告
      - name: Code coverage
        run: mvn jacoco:report -Drevision=${{ steps.extract_version.outputs.version }}

      # 将覆盖率报告上传至 Codecov 平台（仅在测试成功时执行）
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./target/site/jacoco/jacoco.xml

      # 编译项目源码
      - name: Build project
        run: mvn clean compile -Drevision=${{ steps.extract_version.outputs.version }}

      # 验证项目结构是否符合 Maven 规范
      - name: Validate project structure
        run: mvn validate -Drevision=${{ steps.extract_version.outputs.version }}

  # 安全扫描任务：依赖项安全检查，依赖于 test 任务完成
  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # 检出代码到工作目录
      - name: Checkout code
        uses: actions/checkout@v4

      # 配置 JDK 21 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 从 pom.xml 中提取项目版本号
      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      # 使用 OWASP Dependency Check 扫描项目依赖的安全漏洞
      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -Drevision=${{ steps.extract_version.outputs.version }} \
            -DfailBuildOnCVSS=7

      # 上传安全扫描报告
      - name: Upload security scan report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html

  # 代码质量检查任务
  code-quality:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # 检出代码到工作目录
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # 获取完整历史记录以进行 SonarQube 分析
          fetch-depth: 0

      # 配置 JDK 21 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 从 pom.xml 中提取项目版本号
      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      # 缓存 SonarQube 分析数据
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # 运行 SonarQube 代码质量分析
      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Drevision=${{ steps.extract_version.outputs.version }} \
            -Dsonar.projectKey=athena-parent \
            -Dsonar.organization=your-org \
            -Dsonar.host.url=https://sonarcloud.io

  # 构建和打包任务
  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]

    steps:
      # 检出代码到工作目录
      - name: Checkout code
        uses: actions/checkout@v4

      # 配置 JDK 21 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 从 pom.xml 中提取项目版本号
      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      # 打包项目
      - name: Package project
        run: mvn clean package -DskipTests -Drevision=${{ steps.extract_version.outputs.version }}

      # 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ steps.extract_version.outputs.version }}
          path: |
            **/target/*.jar
            **/target/*.war
          retention-days: 7

  # 通知任务：发送构建结果通知
  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality, build]
    if: always()

    steps:
      # 发送成功通知
      - name: Notify success
        if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.code-quality.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ All jobs completed successfully!"
          echo "Ready for deployment to development environment."

      # 发送失败通知
      - name: Notify failure
        if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.code-quality.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ One or more jobs failed!"
          echo "Test: ${{ needs.test.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Build: ${{ needs.build.result }}"
