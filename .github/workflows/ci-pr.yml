# Pull Request 持续集成工作流
name: CI - Pull Request

on:
  pull_request:
    branches: [ develop, master ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read

env:
  MAVEN_OPTS: "-Xmx2048m"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

jobs:
  # 变更检测
  changes:
    runs-on: ubuntu-latest
    outputs:
      java: ${{ steps.changes.outputs.java }}
      docs: ${{ steps.changes.outputs.docs }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            java:
              - '**/*.java'
              - '**/pom.xml'
              - '**/*.properties'
              - '**/*.yml'
              - '**/*.yaml'
            docs:
              - '**/*.md'
              - 'docs/**'
            config:
              - '.github/**'
              - '**/pom.xml'

  # 快速验证
  quick-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: changes
    if: needs.changes.outputs.java == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate and compile
        run: |
          mvn ${{ env.MAVEN_CLI_OPTS }} validate -Drevision=${{ steps.extract_version.outputs.version }}
          mvn ${{ env.MAVEN_CLI_OPTS }} clean compile -Drevision=${{ steps.extract_version.outputs.version }}

  # 完整测试
  test:
    runs-on: ubuntu-latest
    needs: [ changes, quick-check ]
    if: needs.changes.outputs.java == 'true'
    timeout-minutes: 25

    strategy:
      matrix:
        test-type: [ unit, integration ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: mvn ${{ env.MAVEN_CLI_OPTS }} test -Drevision=${{ steps.extract_version.outputs.version }}

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: mvn ${{ env.MAVEN_CLI_OPTS }} verify -DskipUnitTests=true -Drevision=${{ steps.extract_version.outputs.version }}

      - name: Generate test reports
        if: always()
        uses: dorny/test-reporter@v1.9.1
        with:
          name: ${{ matrix.test-type }} Tests
          path: '**/target/surefire-reports/*.xml,**/target/failsafe-reports/*.xml'
          reporter: java-junit
          fail-on-error: false

  # 代码质量分析
  quality-gate:
    runs-on: ubuntu-latest
    needs: [ changes, quick-check ]
    if: needs.changes.outputs.java == 'true'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Code quality checks
        run: |
          mvn ${{ env.MAVEN_CLI_OPTS }} compile -Drevision=${{ steps.extract_version.outputs.version }}
          mvn ${{ env.MAVEN_CLI_OPTS }} checkstyle:check -Drevision=${{ steps.extract_version.outputs.version }} || true
          mvn ${{ env.MAVEN_CLI_OPTS }} spotbugs:check -Drevision=${{ steps.extract_version.outputs.version }} || true

      - name: SonarQube Scan
        if: github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn ${{ env.MAVEN_CLI_OPTS }} verify sonar:sonar \
            -Dsonar.projectKey=athena-parent \
            -Dsonar.organization=gls-athena \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.pullrequest.key=${{ github.event.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }} \
            -Dsonar.pullrequest.base=${{ github.base_ref }} \
            -Drevision=${{ steps.extract_version.outputs.version }}

  # 安全检查
  security-check:
    runs-on: ubuntu-latest
    needs: [ changes, quick-check ]
    if: needs.changes.outputs.java == 'true'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: OWASP Dependency Check
        run: mvn ${{ env.MAVEN_CLI_OPTS }} org.owasp:dependency-check-maven:check -Drevision=${{ steps.extract_version.outputs.version }}
        continue-on-error: true

      - name: Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 构建验证
  build-check:
    runs-on: ubuntu-latest
    needs: [ test, quality-gate, security-check ]
    if: needs.changes.outputs.java == 'true'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build without tests
        run: mvn ${{ env.MAVEN_CLI_OPTS }} clean package -DskipTests -Drevision=${{ steps.extract_version.outputs.version }}

      - name: Verify build artifacts
        run: |
          find . -name "*.jar" -path "*/target/*" -not -path "*-sources.jar" -not -path "*-javadoc.jar" | head -10

  # PR 摘要报告
  pr-summary:
    runs-on: ubuntu-latest
    needs: [ changes, quick-check, test, quality-gate, security-check, build-check ]
    if: always()

    steps:
      - name: Generate PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};
            
            let summary = "## 🔍 Pull Request 验证摘要\n\n";
            
            if (needs.changes.outputs.java === 'true') {
              summary += "### 📊 检查结果\n\n";
              summary += "| 检查项 | 状态 | 详情 |\n";
              summary += "|--------|------|------|\n";
              summary += `| 快速验证 | ${needs['quick-check'].result === 'success' ? '✅' : '❌'} | 编译和基本验证 |\n`;
              summary += `| 单元测试 | ${needs.test.result === 'success' ? '✅' : '❌'} | 所有测试用例 |\n`;
              summary += `| 代码质量 | ${needs['quality-gate'].result === 'success' ? '✅' : '❌'} | 静态分析和代码规范 |\n`;
              summary += `| 安全检查 | ${needs['security-check'].result === 'success' ? '✅' : '❌'} | 依赖漏洞扫描 |\n`;
              summary += `| 构建验证 | ${needs['build-check'].result === 'success' ? '✅' : '❌'} | 打包和构建 |\n`;
            } else {
              summary += "### 📝 文档变更\n\n";
              summary += "此 PR 主要包含文档或配置变更，跳过了 Java 代码相关检查。\n";
            }
            
            summary += "\n### 📋 变更检测\n\n";
            summary += `- Java 代码: ${needs.changes.outputs.java === 'true' ? '是' : '否'}\n`;
            summary += `- 文档: ${needs.changes.outputs.docs === 'true' ? '是' : '否'}\n`;
            summary += `- 配置: ${needs.changes.outputs.config === 'true' ? '是' : '否'}\n`;
            
            return summary;
          result-encoding: string

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `${{ steps.pr-summary.outputs.result }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
