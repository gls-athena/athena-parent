name: CD - Master Branch Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout | sed 's/-SNAPSHOT//')
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate next version
        id: next_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current }}"
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          
          # 解析版本号
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # 根据类型递增版本
          case $VERSION_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          NEXT_SNAPSHOT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))-SNAPSHOT"
          
          echo "next=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "next_snapshot=$NEXT_SNAPSHOT_VERSION" >> $GITHUB_OUTPUT
          echo "Next release version: $NEXT_VERSION"
          echo "Next development version: $NEXT_SNAPSHOT_VERSION"

      - name: Run tests before release
        run: |
          mvn clean test -Drevision=${{ steps.next_version.outputs.next }}

      - name: Update version for release
        run: |
          mvn versions:set -DnewVersion=${{ steps.next_version.outputs.next }} -DgenerateBackupPoms=false
          mvn versions:update-child-modules -DgenerateBackupPoms=false

      - name: Build and package
        run: |
          mvn clean package -DskipTests -Drevision=${{ steps.next_version.outputs.next }}

      - name: Commit release version
        run: |
          git add .
          git commit -m "Release version ${{ steps.next_version.outputs.next }}" || echo "No changes to commit"

      - name: Create release tag
        run: |
          git tag -a "v${{ steps.next_version.outputs.next }}" -m "Release version ${{ steps.next_version.outputs.next }}"

      - name: Update to next development version
        run: |
          mvn versions:set -DnewVersion=${{ steps.next_version.outputs.next_snapshot }} -DgenerateBackupPoms=false
          mvn versions:update-child-modules -DgenerateBackupPoms=false

      - name: Commit next development version
        run: |
          git add .
          git commit -m "Prepare for next development iteration ${{ steps.next_version.outputs.next_snapshot }}" || echo "No changes to commit"

      - name: Push changes and tags
        run: |
          git push origin master
          git push origin "v${{ steps.next_version.outputs.next }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.next_version.outputs.next }}"
          release_name: "Release v${{ steps.next_version.outputs.next }}"
          body: |
            ## Release Notes for v${{ steps.next_version.outputs.next }}
            
            ### Changes
            - Automated release from master branch
            - Version increment: ${{ github.event.inputs.version_type || 'patch' }}
            
            ### Artifacts
            This release includes all Maven modules in the athena-parent project.
            
            ### Installation
            ```xml
            <dependency>
                <groupId>com.gls.athena</groupId>
                <artifactId>athena-parent</artifactId>
                <version>${{ steps.next_version.outputs.next }}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            ```
          draft: false
          prerelease: false

      - name: Deploy to Maven Repository
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        run: |
          if [ -n "$MAVEN_USERNAME" ] && [ -n "$MAVEN_PASSWORD" ]; then
            mvn deploy -DskipTests -Drevision=${{ steps.next_version.outputs.next }} \
              -s .github/settings.xml \
              -Dmaven.repo.username=$MAVEN_USERNAME \
              -Dmaven.repo.password=$MAVEN_PASSWORD
          else
            echo "Maven deployment skipped - credentials not configured"
          fi

  notify:
    runs-on: ubuntu-latest
    needs: release
    if: always()

    steps:
      - name: Notify on success
        if: needs.release.result == 'success'
        run: |
          echo "✅ Release completed successfully!"
          echo "New version: v${{ needs.release.outputs.next_version }}"

      - name: Notify on failure
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release failed!"
          echo "Please check the logs and fix any issues."
