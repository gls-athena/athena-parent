# 工作流名称：CD - Master Branch Release
# 功能描述：当 master 分支有推送或手动触发时，自动执行版本发布流程

name: CD - Master Branch Release

# 触发条件
on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

# 权限配置
permissions:
  contents: write
  packages: write

# 定义工作流中的作业
jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 设置 JDK 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 配置 Git 用户信息
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 设置 GPG 密钥（如果需要签名）
      - name: Set up GPG
        if: ${{ secrets.GPG_PRIVATE_KEY != '' }}
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      # 计算版本号
      - name: Calculate release version
        id: version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout | sed 's/-SNAPSHOT//')
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          
          # 当前版本就是要发布的版本
          RELEASE_VERSION="$CURRENT_VERSION"
          
          # 计算下一个开发版本
          IFS='.' read -ra VERSION_PARTS <<< "$RELEASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $VERSION_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
          
          echo "release=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "next=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $RELEASE_VERSION"
          echo "Next development version: $NEXT_VERSION"

      # 生成 Release Notes
      - name: Generate release notes
        id: release_notes
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --oneline --no-merges --format="- %s (%h)" | head -20)
          else
            COMMITS=$(git log HEAD --oneline --no-merges --format="- %s (%h)" | head -10)
          fi
          
          {
            echo 'commits<<EOF'
            echo "$COMMITS"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          echo "previous_tag=${PREVIOUS_TAG:-'Initial release'}" >> $GITHUB_OUTPUT

      # 运行测试
      - name: Run tests
        run: mvn clean test -Drevision=${{ steps.version.outputs.release }}

      # 发布版本：更新版本、构建、创建标签
      - name: Release version
        run: |
          # 更新为发布版本
          sed -i "s/<revision>.*<\/revision>/<revision>${{ steps.version.outputs.release }}<\/revision>/g" pom.xml
          
          # 构建项目
          mvn clean package -DskipTests -Drevision=${{ steps.version.outputs.release }}
          
          # 提交发布版本
          git add .
          git commit -m "Release version ${{ steps.version.outputs.release }}" || echo "No changes to commit"
          
          # 创建标签
          git tag -a "v${{ steps.version.outputs.release }}" -m "Release version ${{ steps.version.outputs.release }}"

      # 部署到 Maven 仓库（支持 SNAPSHOT 和 Release）
      - name: Deploy to Maven Repository
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEYNAME: ${{ secrets.GPG_KEYNAME }}
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ steps.version.outputs.release }}" == *"SNAPSHOT"* ]]; then
            echo "📦 Deploying SNAPSHOT version to OSSRH..."
            mvn deploy -DskipTests -Drevision=${{ steps.version.outputs.release }} \
              --settings .github/settings.xml \
              -Possrh
          else
            echo "📦 Deploying RELEASE version to Maven Central..."
            mvn deploy -DskipTests -Drevision=${{ steps.version.outputs.release }} \
              --settings .github/settings.xml \
              -Prelease,ossrh
          fi

      # 准备下一个开发版本
      - name: Prepare next development version
        run: |
          # 更新为下一个开发版本
          sed -i "s/<revision>.*<\/revision>/<revision>${{ steps.version.outputs.next }}<\/revision>/g" pom.xml
          
          # 提交下一个开发版本
          git add .
          git commit -m "Prepare for next development iteration ${{ steps.version.outputs.next }}" || echo "No changes to commit"

      # 推送变更
      - name: Push changes
        run: |
          git push origin master
          git push origin "v${{ steps.version.outputs.release }}"

      # 同步到 develop 分支
      - name: Sync to develop branch
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/develop; then
            git checkout develop
            git pull origin develop
            git merge master --no-ff -m "Sync release v${{ steps.version.outputs.release }} changes to develop"
            git push origin develop
            echo "✅ Successfully synced changes to develop branch"
          else
            echo "⚠️ Develop branch does not exist, skipping sync"
          fi

      # 创建 GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.version.outputs.release }}"
          name: "Release v${{ steps.version.outputs.release }}"
          body: |
            ## Release Notes for v${{ steps.version.outputs.release }}
            
            **Release Type:** ${{ github.event.inputs.version_type || 'patch' }} version increment
            **Previous Version:** ${{ steps.release_notes.outputs.previous_tag }}
            
            ### 🚀 What's Changed
            ${{ steps.release_notes.outputs.commits }}
            
            ### 📦 Installation
            
            ```xml
            <dependency>
                <groupId>io.github.gls-athena</groupId>
                <artifactId>athena-parent</artifactId>
                <version>${{ steps.version.outputs.release }}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            ```
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.release_notes.outputs.previous_tag }}...v${{ steps.version.outputs.release }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      # 发布结果通知
      - name: Notify result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Release v${{ steps.version.outputs.release }} completed successfully!"
            echo "📦 Artifacts deployed to Maven Central"
            echo "🏷️ Git tag v${{ steps.version.outputs.release }} created"
            echo "📋 GitHub Release created"
          else
            echo "❌ Release failed! Please check the logs and fix any issues."
            echo "🔍 Common issues:"
            echo "  - Missing OSSRH credentials (OSSRH_USERNAME, OSSRH_PASSWORD)"
            echo "  - Missing GPG configuration (GPG_PRIVATE_KEY, GPG_PASSPHRASE)"
            echo "  - Network connectivity issues"
          fi
