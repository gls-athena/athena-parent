# 主分支持续部署工作流
name: CD - Master Branch Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version_type:
        description: '版本递增类型'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: '跳过测试'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  id-token: write

env:
  MAVEN_OPTS: "-Xmx3072m"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

jobs:
  # 预发布检查
  pre-release-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      current-version: ${{ steps.version.outputs.current }}
      new-version: ${{ steps.version.outputs.new }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Get current version
        id: version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout | sed 's/-SNAPSHOT//')
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"

      - name: Check if release needed
        id: check
        run: |
          if git tag | grep -q "^v${{ steps.version.outputs.new }}$"; then
            echo "Version ${{ steps.version.outputs.new }} already exists"
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi

      - name: Run quick tests
        if: steps.check.outputs.should-release == 'true' && github.event.inputs.skip_tests != 'true'
        run: |
          mvn ${{ env.MAVEN_CLI_OPTS }} clean test -Drevision=${{ steps.version.outputs.new }}

  # 完整测试套件
  comprehensive-test:
    runs-on: ubuntu-latest
    needs: pre-release-check
    if: needs.pre-release-check.outputs.should-release == 'true' && github.event.inputs.skip_tests != 'true'
    timeout-minutes: 30

    strategy:
      matrix:
        java-version: [ 21 ]
        test-profile: [ default, integration ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: |
          if [ "${{ matrix.test-profile }}" = "integration" ]; then
            mvn ${{ env.MAVEN_CLI_OPTS }} verify -Drevision=${{ needs.pre-release-check.outputs.new-version }}
          else
            mvn ${{ env.MAVEN_CLI_OPTS }} test -Drevision=${{ needs.pre-release-check.outputs.new-version }}
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.java-version }}-${{ matrix.test-profile }}
          path: '**/target/surefire-reports/*.xml'

  # 安全和质量检查
  security-quality-check:
    runs-on: ubuntu-latest
    needs: pre-release-check
    if: needs.pre-release-check.outputs.should-release == 'true'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: OWASP Dependency Check
        run: |
          mvn ${{ env.MAVEN_CLI_OPTS }} org.owasp:dependency-check-maven:check \
            -Drevision=${{ needs.pre-release-check.outputs.new-version }}

      - name: SonarQube Quality Gate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn ${{ env.MAVEN_CLI_OPTS }} verify sonar:sonar \
            -Dsonar.projectKey=athena-parent \
            -Dsonar.organization=gls-athena \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.qualitygate.wait=true \
            -Drevision=${{ needs.pre-release-check.outputs.new-version }}

  # 构建和发布
  build-and-release:
    runs-on: ubuntu-latest
    needs: [ pre-release-check, comprehensive-test, security-quality-check ]
    if: |
      always() && 
      needs.pre-release-check.outputs.should-release == 'true' &&
      (needs.comprehensive-test.result == 'success' || needs.comprehensive-test.result == 'skipped') &&
      needs.security-quality-check.result == 'success'
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Configure GPG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo RELOADAGENT | gpg-connect-agent

      - name: Configure Maven settings
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Update version
        run: |
          NEW_VERSION="${{ needs.pre-release-check.outputs.new-version }}"
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit

      - name: Build and package
        run: |
          mvn ${{ env.MAVEN_CLI_OPTS }} clean package -DskipTests \
            -Drevision=${{ needs.pre-release-check.outputs.new-version }}

      - name: Deploy to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn ${{ env.MAVEN_CLI_OPTS }} deploy -P release -DskipTests \
            -Drevision=${{ needs.pre-release-check.outputs.new-version }}

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ needs.pre-release-check.outputs.new-version }}"
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.pre-release-check.outputs.new-version }}
          release_name: Release v${{ needs.pre-release-check.outputs.new-version }}
          body: |
            ## 🚀 Release v${{ needs.pre-release-check.outputs.new-version }}
            
            ### 📋 变更日志
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### 📦 Maven 坐标
            ```xml
            <dependency>
                <groupId>io.github.gls-athena</groupId>
                <artifactId>athena-parent</artifactId>
                <version>${{ needs.pre-release-check.outputs.new-version }}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            ```
            
            ### 🔗 相关链接
            - [Maven Central](https://search.maven.org/artifact/io.github.gls-athena/athena-parent/${{ needs.pre-release-check.outputs.new-version }}/pom)
            - [文档](https://github.com/gls-athena/athena-parent/blob/v${{ needs.pre-release-check.outputs.new-version }}/README.md)
          draft: false
          prerelease: false

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.pre-release-check.outputs.new-version }}
          path: |
            **/target/*.jar
            **/target/*.pom
          retention-days: 30

  # 后发布任务
  post-release:
    runs-on: ubuntu-latest
    needs: [ pre-release-check, build-and-release ]
    if: always() && needs.build-and-release.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Prepare next development version
        run: |
          CURRENT_VERSION="${{ needs.pre-release-check.outputs.new-version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))-SNAPSHOT"
          
          mvn versions:set -DnewVersion=$NEXT_VERSION
          mvn versions:commit
          
          git add .
          git commit -m "chore: prepare next development version $NEXT_VERSION [skip ci]"
          git push origin master

      - name: Sync to develop branch
        run: |
          git checkout develop || git checkout -b develop
          git merge master --no-edit
          git push origin develop

      - name: Create workflow summary
        run: |
          echo "## 🎉 发布成功!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 发布信息" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: v${{ needs.pre-release-check.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **发布时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Maven Central**: [查看](https://search.maven.org/artifact/io.github.gls-athena/athena-parent/${{ needs.pre-release-check.outputs.new-version }}/pom)" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: [查看](https://github.com/gls-athena/athena-parent/releases/tag/v${{ needs.pre-release-check.outputs.new-version }})" >> $GITHUB_STEP_SUMMARY
